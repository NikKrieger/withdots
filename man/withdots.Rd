% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/withdots.R
\name{withdots}
\alias{withdots}
\title{Give a \link{function} \code{...} if it does not have it}
\usage{
withdots(f)
}
\arguments{
\item{f}{A \link{closure}: a \link{function} that is not \link{primitive}. Must satisfy
\code{\link{is.function}}\code{(f)} and \code{!}\code{\link{is.primitive}}\code{(f)}. Consider pre-processing
with \code{\link[rlang:as_closure]{rlang::as_closure()}}.}
}
\value{
A \link{closure}.
}
\description{
Puts \code{\link[=dots]{...}} in the \code{\link[=formals]{formals()}} of a \link{closure} (i.e., a non-\link{primitive}
\link{function}) if it does not have it already.
}
\details{
If \code{\link{formals}}\code{(f)} already contains \code{\link[=dots]{...}} then it \link{return}s \code{f} with
no changes.

Otherwise:
\enumerate{
\item First, \code{\link{attributes}}\code{(f)} are temporarily saved and set aside.
\item \code{\link[=dots]{...}} is added to the \code{\link[=formals]{formals()}} of \code{f} using \code{\link{formals<-}}.
\item The saved \link{attributes} are added back to \code{f} with \code{\link{attributes<-}}.
\item \code{f} is returned.
}

This does not work with \link{primitive} functions since they have no \code{\link[=formals]{formals()}}.
It only works with \link{closure}s. Consider pre-processing \link{primitive}s with
\code{\link[rlang:as_closure]{rlang::as_closure()}}, but keep in mind that argument matching may be
different from what is expected since any given primitive may have its own
special argument matching behavior (e.g., \code{\link[=switch]{switch()}}, \code{\link[=call]{call()}}).
}
\examples{
# The base::match() function:
match

# Can't handle extraneous arguments
if (FALSE) {
  match("z", letters, cannot_handle_ = "junk arguments")
}

# match() with dots:
match_with_dots <- withdots(match)

# Can now handle extraneous arguments:
match_with_dots("z", letters, can_now_handle = "junk arguments")
}
